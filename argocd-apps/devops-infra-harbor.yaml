apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: harbor
  # You'll usually want to add your resources to the argocd namespace.
  namespace: argocd
spec:
  # The project the application belongs to.
  project: devops-infra
  # Destination cluster and namespace to deploy the application
  destination:
    # The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    namespace: devops-infra
    server: https://kubernetes.default.svc
  # Source of the application manifests
  source:
    repoURL: https://github.com/codeboz/argocd.git
    targetRevision: HEAD
    path: devops-infra/harbor/harbor-helm
    # helm specific config
    # chart: chart-name  # Set this when pulling directly from a Helm repo. DO NOT set for git-hosted Helm charts.
    helm:
      # Release name override (defaults to application name)
      # releaseName: guestbook
      version: v3
      # Helm values files for overriding values in the helm chart
      # The path is relative to the spec.source.path directory defined above
      valueFiles:
      - values.yaml
      - ../values-override.yaml
      # Values file as block file
      # values: |
      #   ingress:
      #     enabled: true
      #     path: /
      #     hosts:
      # Extra parameters to set (same as setting through values.yaml, but these take precedence)
      # parameters:
      # - name: "nginx-ingress.controller.service.annotations.external-dns\\.alpha\\.kubernetes\\.io/hostname"
      #   value: mydomain.example.com
      # - name: "ingress.annotations.kubernetes\\.io/tls-acme"
      #   value: "true"
      #   forceString: true # ensures that value is treated as a string

    # kustomize specific config
    # kustomize:
      # Optional kustomize version. Note: version must be configured in argocd-cm ConfigMap
      # version: v3.5.4
      # Optional image name prefix
      # namePrefix: prod-
      # Optional images passed to "kustomize edit set image".
      # images:
      # - gcr.io/heptio-images/ks-guestbook-demo:0.2
    
  # Sync policy
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:
    - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation

    # retry:
    #   limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
    #   backoff:
    #     duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
    #     factor: 2 # a factor to multiply the base duration after each failed retry
    #     maxDuration: 3m # the maximum amount of time allowed for the backoff strategy